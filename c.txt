编写一个函数，接受一个字符串参数，将字符串中的每个单词的首字母都转换成大写字母，其余字母转换成小写字母，返回转换后的字符串。


c
Copy
#include <stdio.h>
#include <ctype.h>
#include <string.h>

char* convertString(char* str) {
    int i;
    int len = strlen(str);
    int start = 0;
    for (i = 0; i < len; i++) {
        if (isspace(str[i])) {
            str[i] = tolower(str[i]);
            str[start] = toupper(str[start]);
            start = i + 1;
        }
    }
    str[start] = toupper(str[start]);
    return str;
}

int main() {
    char str[100];
    printf("Please enter a string: ");
    fgets(str, 100, stdin);
    printf("Converted string: %s\n", convertString(str));
    return 0;
}
编写一个函数，接受一个整数数组参数，返回一个新的数组，其中每个元素等于原数组中该元素及其后面元素的和。
c
Copy
#include <stdio.h>
#include <stdlib.h>

int* sumArray(int* arr, int size) {
    int i, j;
    int* result = (int*)malloc(size * sizeof(int));
    for (i = 0; i < size; i++) {
        int sum = 0;
        for (j = i; j < size; j++) {
            sum += arr[j];
        }
        result[i] = sum;
    }
    return result;
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int* result = sumArray(arr, 5);
    int i;
    for (i = 0; i < 5; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
    free(result);
    return 0;
}
编写一个函数，接受一个字符串参数，判断该字符串是否是回文字符串（正读和反读都是一样的字符串），返回一个布尔值。
c
Copy
#include <stdio.h>
#include <string.h>

int isPalindrome(char* str) {
    int i, j;
    int len = strlen(str);
    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;
        }
    }
    return 1;
}

int main() {
    char str[] = "racecar";
    if (isPalindrome(str)) {
        printf("%s is a palindrome.\n", str);
    } else {
        printf("%s is not a palindrome.\n", str);
    }
    return 0;
}
编写一个函数，接受一个整数参数，返回一个布尔值，判断该整数是否是质数。
c
Copy
#include <stdio.h>

int isPrime(int n) {
    int i;
    if (n < 2) {
        return 0;
    }
    for (i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            return 0;
        }
    }
    return 1;
}

int main() {
    int n = 23;
    if (isPrime(n)) {
        printf("%d is a prime number.\n", n);
    } else {
        printf("%d is not a prime number.\n", n);
    }
    return 0;
}
编写一个函数，接受一个整数参数n，返回一个n行n列的螺旋矩阵，矩阵中的元素从1开始，顺时针方向递增。
c
Copy
#include <stdio.h>
#include <stdlib.h>

int** generateMatrix(int n) {
    int** matrix = (int**)malloc(n * sizeof(int*));
    int i, j;
    for (i = 0; i < n; i++) {
        matrix[i] = (int*)malloc(n * sizeof(int));
        for (j = 0; j < n; j++) {
            matrix[i][j] = 0;
        }
    }
    int num = 1;
    int rowStart = 0, rowEnd = n - 1;
    int colStart = 0, colEnd = n - 1;
    while (rowStart <= rowEnd && colStart <= colEnd) {
        for (j = colStart; j <= colEnd; j++) {
            matrix[rowStart][j] = num++;
        }
        rowStart++;
        for (i = rowStart; i <= rowEnd; i++) {
            matrix[i][colEnd] = num++;
        }
        colEnd--;
        if (rowStart <= rowEnd) {
            for (j = colEnd; j >= colStart; j--) {
                matrix[rowEnd][j] = num++;
            }
            rowEnd--;
        }
        if (colStart <= colEnd) {
            for (i = rowEnd; i >= rowStart; i--) {
                matrix[i][colStart] = num++;
            }
            colStart++;
        }
    }
    return matrix;
}

void printMatrix(int** matrix, int n) {
    int i, j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n = 5;
    int** matrix = generateMatrix(n);
    printMatrix(matrix, n);
    int i;
    for (i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
    return 0;
}
编写一个函数，接受一个字符串参数，返回一个新的字符串，其中每个字符都是原字符串中该字符后面的第一个非重复字符。如果原字符串中没有非重复字符，则用#代替。
c
Copy
#include <stdio.h>
#include <string.h>

char* nextNonRepeatingChar(char* str) {
    int i, j;
    int len = strlen(str);
    int count[26] = {0};
    for (i = len - 1; i >= 0; i--) {
        count[str[i] - 'a']++;
    }
    char* result = (char*)malloc((len + 1) * sizeof(char));
    for (i = 0; i < len; i++) {
        result[i] = '#';
        for (j = i + 1; j < len; j++) {
            if (str[j] == str[i] && count[str[i] - 'a'] == 1) {
                result[i] = str[j];
                break;
            }
        }
        if (result[i] == '#') {
            result[i] = str[i];
        }
    }
    result[len] = '\0';
    return result;
}

int main() {
    char str[] = "leetcode";
    char* result = nextNonRepeatingChar(str);
    printf("%s\n", result);
    free(result);
    return 0;
}
编写一个函数，接受一个整数数组参数，返回一个新的数组，其中每个元素等于原数组中除该元素外的所有元素的乘积。
c
Copy
#include <stdio.h>
#include <stdlib.h>

int* productExceptSelf(int* nums, int numsSize) {
    int i, j;
    int* result = (int*)malloc(numsSize * sizeof(int));
    for (i = 0; i < numsSize; i++) {
        result[i] = 1;
    }
    int left = 1;
    for (i = 0; i < numsSize; i++) {
        result[i] *= left;
        left *= nums[i];
    }
    int right = 1;
    for (i = numsSize - 1; i >= 0; i--) {
        result[i] *= right;
        right *= nums[i];
    }
    return result;
}

int main() {
    int nums[] = {1, 2, 3, 4};
    int* result = productExceptSelf(nums, 4);
    int i;
    for (i = 0; i < 4; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
    free(result);
    return 0;
}
